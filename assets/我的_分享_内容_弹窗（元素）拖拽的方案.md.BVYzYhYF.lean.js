import{ag as s,h as i,aA as e,f as l}from"./chunks/framework.CsZrzBQ9.js";const k=JSON.parse('{"title":"弹窗（元素）拖拽的方案","description":"","frontmatter":{},"headers":[],"relativePath":"我的/分享/内容/弹窗（元素）拖拽的方案.md","filePath":"我的/分享/内容/弹窗（元素）拖拽的方案.md","lastUpdated":1727013557000}'),n={name:"我的/分享/内容/弹窗（元素）拖拽的方案.md"};function t(p,a,o,d,h,r){return l(),i("div",null,a[0]||(a[0]=[e(`<h1 id="弹窗-元素-拖拽的方案" tabindex="-1">弹窗（元素）拖拽的方案 <a class="header-anchor" href="#弹窗-元素-拖拽的方案" aria-label="Permalink to &quot;弹窗（元素）拖拽的方案&quot;">​</a></h1><h2 id="背景简述" tabindex="-1">背景简述 <a class="header-anchor" href="#背景简述" aria-label="Permalink to &quot;背景简述&quot;">​</a></h2><ul><li>为什么要搞这个？</li></ul><p>这个需求很常见的，一般依赖于组件库提供功能或使用 vususe 实现。 最近 同事 xingji 搞了个项目，项目很冗杂，拖拽的需求很多 可能是由于没有 review，所以好的实现 很冗杂。 比如 使用 vue 自定义指令 定义了若干指令 实现该功能 还有 使用 组件插槽的方案 将弹窗根组件 添加鼠标事件实现拖拽效果 还有通过代码混入 minxin 实现拖拽效果 一个项目中有多种代码实现同一个功能是非常不合适的</p><ul><li>主要原因</li></ul><p>多人协作 并没有讨论过，导致代码冗余 多人协作 没有 review 的部分 后期维护 加入新需求 保持能用就行的态度促成屎山</p><h2 id="实现的基本知识" tabindex="-1">实现的基本知识 <a class="header-anchor" href="#实现的基本知识" aria-label="Permalink to &quot;实现的基本知识&quot;">​</a></h2><ol><li>定位 absolute</li><li>鼠标的 mousedown 事件 mousemove 事件 mouseup 事件</li><li>拖拽元素的 offsetLeft offsetTop 属性 clientX clientY 属性等</li><li>拖拽位置变化 tansform: translateX(x) translateY(y) （或者 直接调整 top left 值）</li><li>细节问题 可退拽区域范围</li></ol><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-K0nj-" id="tab-bnr5yhq" checked><label for="tab-bnr5yhq">原生实现</label><input type="radio" name="group-K0nj-" id="tab-yfl3_xe"><label for="tab-yfl3_xe">自定义指令实现</label><input type="radio" name="group-K0nj-" id="tab-Z3X3OtX"><label for="tab-Z3X3OtX">封装根组件实现</label><input type="radio" name="group-K0nj-" id="tab-MuVIHBZ"><label for="tab-MuVIHBZ">hooks 实现</label></div><div class="blocks"><div class="language-js vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. 创建元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 添加事件监听</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3. 位置变换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4. 将元素添加到目标容器（这里的目标容器是为了限制拖拽范围 默认应该是 body）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意 为了语义增强 可以使用dialog 标签</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">……</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码实现</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">……</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">……</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 推荐</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">……</span></span></code></pre></div></div></div>`,10)]))}const u=s(n,[["render",t]]);export{k as __pageData,u as default};
