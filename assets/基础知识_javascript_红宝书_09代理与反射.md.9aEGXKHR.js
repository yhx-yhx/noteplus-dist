import{ag as a,h as i,aA as t,f as n}from"./chunks/framework.CsZrzBQ9.js";const c=JSON.parse('{"title":"代理与反射","description":"","frontmatter":{},"headers":[],"relativePath":"基础知识/javascript/红宝书/09代理与反射.md","filePath":"基础知识/javascript/红宝书/09代理与反射.md","lastUpdated":1724749317000}'),e={name:"基础知识/javascript/红宝书/09代理与反射.md"};function l(h,s,p,k,r,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="代理与反射" tabindex="-1">代理与反射 <a class="header-anchor" href="#代理与反射" aria-label="Permalink to &quot;代理与反射&quot;">​</a></h1><h2 id="代理基础" tabindex="-1">代理基础 <a class="header-anchor" href="#代理基础" aria-label="Permalink to &quot;代理基础&quot;">​</a></h2><ul><li>代理作为一个对象的替身，我们既可以修改代理对象，也可修改原始对象；</li><li>当然修改原始对象会绕过代理。</li></ul><h3 id="创建空代理" tabindex="-1">创建空代理 <a class="header-anchor" href="#创建空代理" aria-label="Permalink to &quot;创建空代理&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> handler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(target, handler); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 参数 目标对象原始对象</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(handler);</span></span></code></pre></div>`,5)]))}const g=a(e,[["render",l]]);export{c as __pageData,g as default};
